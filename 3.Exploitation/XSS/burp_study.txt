Cross-site scripting (also known as XSS) is a web security vulnerability that allows an attacker to compromise the interactions that users have with a vulnerable application.
Cross-site scripting vulnerabilities normally allow an attacker to masquerade as a victim user, to carry out any actions that the user is able to perform, and to access any of the user's data. If the victim user has privileged access within the application, then the attacker might be able to gain full control over all of the application's functionality and data.

Cross-site scripting works by manipulating a vulnerable web site so that it returns malicious JavaScript to users.

You solve the majority of our XSS labs by invoking alert() in a simulated victim's browser.

alert()
or at chrome print()
Unfortunately, there's a slight hitch if you use Chrome. From version 92 onward (July 20th, 2021), cross-origin iframes are prevented from calling alert(). As these are used to construct some of the more advanced XSS attacks, you'll sometimes need to use an alternative PoC payload. In this scenario, we recommend the print()

Types of XXS
- Reflected XSS (isnide HTTTP requests is a malicious sccript)
- Stored XSS (inside the website's database)
- DOM-based XSS (the vulnerability exists in client-side code)

Reflected XSS:
The simpliest variety
It arises when an application receives data in HTTP req





